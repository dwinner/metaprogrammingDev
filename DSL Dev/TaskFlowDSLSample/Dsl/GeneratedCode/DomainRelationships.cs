//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship Flow
	/// Description for AppDevUnited.TaskFlowDSLSample.Flow
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Flow.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Flow.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b2b7b734-fc09-46ff-943e-330446e1b8d6")]
	public partial class Flow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Flow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb2b7b734, 0xfc09, 0x46ff, 0x94, 0x3e, 0x33, 0x04, 0x46, 0xe1, 0xb8, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Flow link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public Flow(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Flow.FlowFromDomainRoleId, source), new DslModeling::RoleAssignment(Flow.FlowToDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowFrom domain role code
		
		/// <summary>
		/// FlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowFromDomainRoleId = new global::System.Guid(0x0a0241f2, 0x21de, 0x46ff, 0xa9, 0x33, 0xdf, 0x5b, 0x1e, 0x9e, 0x08, 0x53);
		
		/// <summary>
		/// DomainRole FlowFrom
		/// Description for AppDevUnited.TaskFlowDSLSample.Flow.FlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Flow/FlowFrom.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Flow/FlowFrom.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowTo", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.Flow/FlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a0241f2-21de-46ff-a933-df5b1e9e0853")]
		public virtual FlowElement FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowFrom of a FlowElement
		/// <summary>
		/// Gets a list of FlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowFrom(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowToDomainRoleId);
		}
		#endregion
		#region FlowTo domain role code
		
		/// <summary>
		/// FlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowToDomainRoleId = new global::System.Guid(0x3b65f5c8, 0x531a, 0x4c54, 0xb1, 0x6b, 0x05, 0x4b, 0x21, 0x3d, 0x8d, 0x83);
		
		/// <summary>
		/// DomainRole FlowTo
		/// Description for AppDevUnited.TaskFlowDSLSample.Flow.FlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Flow/FlowTo.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Flow/FlowTo.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowFrom", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.Flow/FlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b65f5c8-531a-4c54-b16b-054b213d8d83")]
		public virtual FlowElement FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowTo of a FlowElement
		/// <summary>
		/// Gets a list of FlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowTo(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowFromDomainRoleId);
		}
		#endregion
		#region Guard domain property code
		
		/// <summary>
		/// Guard domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuardDomainPropertyId = new global::System.Guid(0xad34b2f6, 0xae5a, 0x4d2a, 0x9f, 0x61, 0x12, 0xb8, 0xdf, 0x05, 0x06, 0x29);
		
		/// <summary>
		/// Storage for Guard
		/// </summary>
		private global::System.String guardPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Guard domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Flow/Guard.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Flow/Guard.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("ad34b2f6-ae5a-4d2a-9f61-12b8df050629")]
		public global::System.String Guard
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return guardPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GuardPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Flow.Guard domain property.
		/// </summary>
		internal sealed partial class GuardPropertyHandler : DslModeling::DomainPropertyValueHandler<Flow, global::System.String>
		{
			private GuardPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Flow.Guard domain property value handler.
			/// </summary>
			public static readonly GuardPropertyHandler Instance = new GuardPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Flow.Guard domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GuardDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Flow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.guardPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Flow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.guardPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowFrom link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.Flow> GetLinksToFlowTo ( global::AppDevUnited.TaskFlowDSLSample.FlowElement flowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.Flow>(flowFromInstance, global::AppDevUnited.TaskFlowDSLSample.Flow.FlowFromDomainRoleId);
		}
		#endregion
		#region FlowTo link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.Flow> GetLinksToFlowFrom ( global::AppDevUnited.TaskFlowDSLSample.FlowElement flowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.Flow>(flowToInstance, global::AppDevUnited.TaskFlowDSLSample.Flow.FlowToDomainRoleId);
		}
		#endregion
		#region Flow instance accessors
		
		/// <summary>
		/// Get any Flow links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.Flow> GetLinks( global::AppDevUnited.TaskFlowDSLSample.FlowElement source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.Flow> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.Flow>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.Flow>(source, global::AppDevUnited.TaskFlowDSLSample.Flow.FlowFromDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Flow link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.Flow GetLink( global::AppDevUnited.TaskFlowDSLSample.FlowElement source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.Flow>(source, global::AppDevUnited.TaskFlowDSLSample.Flow.FlowFromDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship FlowGraphHasComments
	/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d32d4e10-1f4b-4cf4-ae2a-16755e0d186d")]
	public partial class FlowGraphHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowGraphHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd32d4e10, 0x1f4b, 0x4cf4, 0xae, 0x2a, 0x16, 0x75, 0x5e, 0x0d, 0x18, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowGraphHasComments link in the same Partition as the given FlowGraph
		/// </summary>
		/// <param name="source">FlowGraph to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public FlowGraphHasComments(FlowGraph source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowGraphHasComments.FlowGraphDomainRoleId, source), new DslModeling::RoleAssignment(FlowGraphHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph domain role code
		
		/// <summary>
		/// FlowGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowGraphDomainRoleId = new global::System.Guid(0x57bf2297, 0xac9d, 0x4a04, 0x8d, 0x08, 0xc4, 0x1a, 0x0e, 0x61, 0xba, 0xee);
		
		/// <summary>
		/// DomainRole FlowGraph
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraph
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/FlowGraph.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/FlowGraph.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/FlowGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("57bf2297-ac9d-4a04-8d08-c41a0e61baee")]
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowGraph of a Comment
		/// <summary>
		/// Gets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FlowGraph GetFlowGraph(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as FlowGraph;
		}
		
		/// <summary>
		/// Sets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFlowGraph(Comment element, FlowGraph newFlowGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newFlowGraph);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x5f8f9872, 0xcc31, 0x4716, 0xbe, 0x13, 0x81, 0x23, 0x16, 0xf6, 0x7c, 0x80);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/Comment.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/Comment.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowGraph", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5f8f9872-cc31-4716-be13-812316f67c80")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowGraph
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, FlowGraphDomainRoleId);
		}
		#endregion
		#region FlowGraph link accessor
		/// <summary>
		/// Get the list of FlowGraphHasComments links to a FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> GetLinksToComments ( global::AppDevUnited.TaskFlowDSLSample.FlowGraph flowGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments>(flowGraphInstance, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the FlowGraphHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments GetLinkToFlowGraph (global::AppDevUnited.TaskFlowDSLSample.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments>(commentInstance, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FlowGraphHasComments instance accessors
		
		/// <summary>
		/// Get any FlowGraphHasComments links between a given FlowGraph and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> GetLinks( global::AppDevUnited.TaskFlowDSLSample.FlowGraph source, global::AppDevUnited.TaskFlowDSLSample.Comment target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments>(source, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowGraphHasComments link between a given FlowGraphand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments GetLink( global::AppDevUnited.TaskFlowDSLSample.FlowGraph source, global::AppDevUnited.TaskFlowDSLSample.Comment target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments>(source, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship FlowGraphHasActors
	/// The set of actors (represented by swim lanes) in the task flow.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0c75aa85-c994-4f98-b548-b148701b3256")]
	public partial class FlowGraphHasActors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowGraphHasActors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c75aa85, 0xc994, 0x4f98, 0xb5, 0x48, 0xb1, 0x48, 0x70, 0x1b, 0x32, 0x56);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowGraphHasActors link in the same Partition as the given FlowGraph
		/// </summary>
		/// <param name="source">FlowGraph to use as the source of the relationship.</param>
		/// <param name="target">Actor to use as the target of the relationship.</param>
		public FlowGraphHasActors(FlowGraph source, Actor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowGraphHasActors.FlowGraphDomainRoleId, source), new DslModeling::RoleAssignment(FlowGraphHasActors.ActorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasActors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasActors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowGraphHasActors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowGraphHasActors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph domain role code
		
		/// <summary>
		/// FlowGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowGraphDomainRoleId = new global::System.Guid(0x7d1adfec, 0x1d31, 0x4783, 0xa9, 0xbd, 0xd6, 0xb8, 0x93, 0xdc, 0x19, 0x30);
		
		/// <summary>
		/// DomainRole FlowGraph
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraph
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/FlowGraph.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/FlowGraph.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actors", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/FlowGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d1adfec-1d31-4783-a9bd-d6b893dc1930")]
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowGraph of a Actor
		/// <summary>
		/// Gets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FlowGraph GetFlowGraph(Actor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActorDomainRoleId) as FlowGraph;
		}
		
		/// <summary>
		/// Sets FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFlowGraph(Actor element, FlowGraph newFlowGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActorDomainRoleId, newFlowGraph);
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0x6d4ae8be, 0x27b7, 0x4126, 0xa9, 0x62, 0x20, 0x40, 0xdd, 0xf3, 0x2f, 0x50);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/Actor.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/Actor.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowGraph", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors/Actor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6d4ae8be-27b7-4126-a962-2040ddf32f50")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actors of a FlowGraph
		/// <summary>
		/// Gets a list of Actors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actor> GetActors(FlowGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(element, FlowGraphDomainRoleId);
		}
		#endregion
		#region FlowGraph link accessor
		/// <summary>
		/// Get the list of FlowGraphHasActors links to a FlowGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> GetLinksToActors ( global::AppDevUnited.TaskFlowDSLSample.FlowGraph flowGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors>(flowGraphInstance, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the FlowGraphHasActors link to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors GetLinkToFlowGraph (global::AppDevUnited.TaskFlowDSLSample.Actor actorInstance)
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors>(actorInstance, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.ActorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FlowGraphHasActors instance accessors
		
		/// <summary>
		/// Get any FlowGraphHasActors links between a given FlowGraph and a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> GetLinks( global::AppDevUnited.TaskFlowDSLSample.FlowGraph source, global::AppDevUnited.TaskFlowDSLSample.Actor target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors>(source, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowGraphHasActors link between a given FlowGraphand a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors GetLink( global::AppDevUnited.TaskFlowDSLSample.FlowGraph source, global::AppDevUnited.TaskFlowDSLSample.Actor target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors>(source, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors link in links )
			{
				if ( target.Equals(link.Actor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4838db37-d729-4d90-b3c8-83c2835af31d")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4838db37, 0xd729, 0x4d90, 0xb3, 0xc8, 0x83, 0xc2, 0x83, 0x5a, 0xf3, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x90664665, 0x95fe, 0x47a2, 0xab, 0xf0, 0x84, 0x8f, 0x51, 0x38, 0x30, 0x06);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Comment.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Comment.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("90664665-95fe-47a2-abf0-848f51383006")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowElement
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x5836c2ac, 0x4844, 0x466b, 0x8c, 0x78, 0x59, 0x4a, 0xe6, 0xff, 0x02, 0x71);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Subject.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Subject.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5836c2ac-4844-466b-8c78-594ae6ff0271")]
		public virtual FlowElement Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> GetLinksToSubjects ( global::AppDevUnited.TaskFlowDSLSample.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects>(commentInstance, global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> GetLinksToComments ( global::AppDevUnited.TaskFlowDSLSample.FlowElement subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects>(subjectInstance, global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> GetLinks( global::AppDevUnited.TaskFlowDSLSample.Comment source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects>(source, global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects GetLink( global::AppDevUnited.TaskFlowDSLSample.Comment source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects>(source, global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship ObjectFlow
	/// Relationship between Tasks and ObjectInStates.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e60aefb9-1cff-4989-b736-3e0e493558a0")]
	public partial class ObjectFlow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectFlow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe60aefb9, 0x1cff, 0x4989, 0xb7, 0x36, 0x3e, 0x0e, 0x49, 0x35, 0x58, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectFlow link in the same Partition as the given ObjectFlowElement
		/// </summary>
		/// <param name="source">ObjectFlowElement to use as the source of the relationship.</param>
		/// <param name="target">ObjectFlowElement to use as the target of the relationship.</param>
		public ObjectFlow(ObjectFlowElement source, ObjectFlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectFlow.ObjectFlowToDomainRoleId, source), new DslModeling::RoleAssignment(ObjectFlow.ObjectFlowFromDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectFlow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectFlow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectFlow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectFlow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectFlowTo domain role code
		
		/// <summary>
		/// ObjectFlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectFlowToDomainRoleId = new global::System.Guid(0x000cb805, 0x7580, 0x4374, 0xac, 0x8e, 0xa2, 0xea, 0xd4, 0x64, 0xe5, 0x90);
		
		/// <summary>
		/// DomainRole ObjectFlowTo
		/// Description for AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowTo.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowTo.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectFlowFrom", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("000cb805-7580-4374-ac8e-a2ead464e590")]
		public virtual ObjectFlowElement ObjectFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectFlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectFlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectFlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectFlowTo of a ObjectFlowElement
		/// <summary>
		/// Gets a list of ObjectFlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectFlowElement> GetObjectFlowTo(ObjectFlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(element, ObjectFlowFromDomainRoleId);
		}
		#endregion
		#region ObjectFlowFrom domain role code
		
		/// <summary>
		/// ObjectFlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectFlowFromDomainRoleId = new global::System.Guid(0xd8cfa0c4, 0xb01f, 0x46f1, 0xa9, 0x8d, 0x0e, 0x6b, 0xd9, 0x4e, 0xa2, 0x12);
		
		/// <summary>
		/// DomainRole ObjectFlowFrom
		/// Description for AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowFrom.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowFrom.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectFlowTo", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.ObjectFlow/ObjectFlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d8cfa0c4-b01f-46f1-a98d-0e6bd94ea212")]
		public virtual ObjectFlowElement ObjectFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectFlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectFlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectFlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectFlowFrom of a ObjectFlowElement
		/// <summary>
		/// Gets a list of ObjectFlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectFlowElement> GetObjectFlowFrom(ObjectFlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(element, ObjectFlowToDomainRoleId);
		}
		#endregion
		#region ObjectFlowTo link accessor
		/// <summary>
		/// Get the list of ObjectFlow links to a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> GetLinksToObjectFlowFrom ( global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement objectFlowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow>(objectFlowToInstance, global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowToDomainRoleId);
		}
		#endregion
		#region ObjectFlowFrom link accessor
		/// <summary>
		/// Get the list of ObjectFlow links to a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> GetLinksToObjectFlowTo ( global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement objectFlowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow>(objectFlowFromInstance, global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowFromDomainRoleId);
		}
		#endregion
		#region ObjectFlow instance accessors
		
		/// <summary>
		/// Get any ObjectFlow links between a given ObjectFlowElement and a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> GetLinks( global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement source, global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow>(source, global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowToDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.ObjectFlow link in links )
			{
				if ( target.Equals(link.ObjectFlowFrom) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectFlow link between a given ObjectFlowElementand a ObjectFlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.ObjectFlow GetLink( global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement source, global::AppDevUnited.TaskFlowDSLSample.ObjectFlowElement target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ObjectFlow>(source, global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowToDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.ObjectFlow link in links )
			{
				if ( target.Equals(link.ObjectFlowFrom) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainRelationship ActorHasFlowElements
	/// Description for AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7841215f-2f4c-43a6-b363-055ea1e335b5")]
	public partial class ActorHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ActorHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7841215f, 0x2f4c, 0x43a6, 0xb3, 0x63, 0x05, 0x5e, 0xa1, 0xe3, 0x35, 0xb5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ActorHasFlowElements link in the same Partition as the given Actor
		/// </summary>
		/// <param name="source">Actor to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public ActorHasFlowElements(Actor source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ActorHasFlowElements.ActorDomainRoleId, source), new DslModeling::RoleAssignment(ActorHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActorHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActorHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Actor domain role code
		
		/// <summary>
		/// Actor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActorDomainRoleId = new global::System.Guid(0x9f2f7e45, 0x448a, 0x4e3d, 0x8e, 0xc0, 0xc6, 0x5a, 0xaa, 0xc6, 0xfd, 0x83);
		
		/// <summary>
		/// DomainRole Actor
		/// Description for AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.Actor
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/Actor.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/Actor.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/Actor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f2f7e45-448a-4e3d-8ec0-c65aaac6fd83")]
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actor)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actor of a FlowElement
		/// <summary>
		/// Gets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Actor GetActor(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as Actor;
		}
		
		/// <summary>
		/// Sets Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActor(FlowElement element, Actor newActor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newActor);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0x74babe19, 0xbae8, 0x472d, 0x8d, 0x17, 0x97, 0xba, 0xa3, 0x55, 0x29, 0xf1);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/FlowElement.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/FlowElement.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Actor", PropertyDisplayNameKey="AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74babe19-bae8-472d-8d17-97baa35529f1")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a Actor
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(Actor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, ActorDomainRoleId);
		}
		#endregion
		#region Actor link accessor
		/// <summary>
		/// Get the list of ActorHasFlowElements links to a Actor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> GetLinksToFlowElements ( global::AppDevUnited.TaskFlowDSLSample.Actor actorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements>(actorInstance, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.ActorDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the ActorHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements GetLinkToActor (global::AppDevUnited.TaskFlowDSLSample.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements>(flowElementInstance, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ActorHasFlowElements instance accessors
		
		/// <summary>
		/// Get any ActorHasFlowElements links between a given Actor and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> GetLinks( global::AppDevUnited.TaskFlowDSLSample.Actor source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements>();
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements>(source, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.ActorDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ActorHasFlowElements link between a given Actorand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements GetLink( global::AppDevUnited.TaskFlowDSLSample.Actor source, global::AppDevUnited.TaskFlowDSLSample.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements>(source, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.ActorDomainRoleId);
			foreach ( global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
