//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass NamedElement
	/// Overall base class that provides every element with a Name property which acts
	/// as its MonikerKey for serialization.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.NamedElement.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.NamedElement.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("5a8c656e-062a-47b6-ac35-9d88b7bad140")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a8c656e, 0x062a, 0x47b6, 0xac, 0x35, 0x9d, 0x88, 0xb7, 0xba, 0xd1, 0x40);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xed8ec972, 0xdfb9, 0x40ea, 0xab, 0x32, 0x82, 0xdd, 0xa4, 0xb3, 0x82, 0x02);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for AppDevUnited.TaskFlowDSLSample.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.NamedElement/Name.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.NamedElement/Name.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ed8ec972-dfb9-40ea-ab32-82dda4b38202")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass FlowGraph
	/// Root element in which others are embedded.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowGraph.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowGraph.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b0106c39-353f-492c-ad90-c4375db2a377")]
	public partial class FlowGraph : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowGraph domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb0106c39, 0x353f, 0x492c, 0xad, 0x90, 0xc4, 0x37, 0x5d, 0xb2, 0xa3, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FlowGraph(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FlowGraph(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraph
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId);
			}
		}
		#endregion
		#region Actors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actors.
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraph
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actor> Actors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actor>, Actor>(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.Actor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::AppDevUnited.TaskFlowDSLSample.Actor sourceActor1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Actor;
			if (sourceActor1 != null)
			{
				// Create link for path FlowGraphHasActors.Actors
				this.Actors.Add(sourceActor1);

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment2 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path FlowGraphHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::AppDevUnited.TaskFlowDSLSample.Actor sourceActor1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Actor;
			if (sourceActor1 != null)
			{
				// Delete link for path FlowGraphHasActors.Actors
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.GetLinks((global::AppDevUnited.TaskFlowDSLSample.FlowGraph)this, sourceActor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.ActorDomainRoleId);
				}

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment2 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path FlowGraphHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.GetLinks((global::AppDevUnited.TaskFlowDSLSample.FlowGraph)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass FlowElement
	/// Elements that can be connected by Flow links.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowElement.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowElement.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff9d5087-02d5-455d-a7bb-cdb43659655f")]
	public abstract partial class FlowElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff9d5087, 0x02d5, 0x455d, 0xa7, 0xbb, 0xcd, 0xb4, 0x36, 0x59, 0x65, 0x5f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xe3d9fd64, 0x1db1, 0x406a, 0xa5, 0x1d, 0xab, 0x04, 0xe0, 0x17, 0xb5, 0xfe);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.FlowElement/Description.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.FlowElement/Description.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e3d9fd64-1db1-406a-a51d-ab04e017b5fe")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<FlowElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FlowElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowTo.
		/// Description for AppDevUnited.TaskFlowDSLSample.Flow.FlowFrom
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::AppDevUnited.TaskFlowDSLSample.Flow.FlowFromDomainRoleId);
			}
		}
		#endregion
		#region FlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowFrom.
		/// Description for AppDevUnited.TaskFlowDSLSample.Flow.FlowTo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::AppDevUnited.TaskFlowDSLSample.Flow.FlowToDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Actor opposite domain role accessor
		/// <summary>
		/// Gets or sets Actor.
		/// Description for AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElement
		/// </summary>
		public virtual Actor Actor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElementDomainRoleId) as Actor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElementDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
						// Segments 0 and 1
						global::AppDevUnited.TaskFlowDSLSample.Actor this2 = this.Actor;
						if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
						// Segments 2 and 3
						global::AppDevUnited.TaskFlowDSLSample.FlowGraph commentHost0 = this2.FlowGraph;
						if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				commentHost0.Comments.Add(sourceComment1);

				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
					// Segments 0 and 1
					global::AppDevUnited.TaskFlowDSLSample.Actor this2 = this.Actor;
					if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
					// Segments 2 and 3
					global::AppDevUnited.TaskFlowDSLSample.FlowGraph commentHost0 = this2.FlowGraph;
					if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ActorHasFlowElements.Actor/!Actor/FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.GetLinks((global::AppDevUnited.TaskFlowDSLSample.FlowGraph)commentHost0, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId);
				}

				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.GetLinks(sourceComment1, (global::AppDevUnited.TaskFlowDSLSample.FlowElement)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.SubjectDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass ObjectFlowElement
	/// Elements that can be connected by ObjectFlow links.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectFlowElement.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectFlowElement.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c6585e45-0b78-490e-848c-b122d4834221")]
	public abstract partial class ObjectFlowElement : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectFlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6585e45, 0x0b78, 0x490e, 0x84, 0x8c, 0xb1, 0x22, 0xd4, 0x83, 0x42, 0x21);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectFlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectFlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectFlowFrom.
		/// Description for AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowTo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectFlowElement> ObjectFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowToDomainRoleId);
			}
		}
		#endregion
		#region ObjectFlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectFlowTo.
		/// Description for AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowFrom
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectFlowElement> ObjectFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectFlowElement>, ObjectFlowElement>(global::AppDevUnited.TaskFlowDSLSample.ObjectFlow.ObjectFlowFromDomainRoleId);
			}
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass Task
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Task.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Task.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5d0b0db7-0f26-474f-85f2-9fb6521bbe41")]
	public partial class Task : ObjectFlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Task domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5d0b0db7, 0x0f26, 0x474f, 0x85, 0xf2, 0x9f, 0xb6, 0x52, 0x1b, 0xbe, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NestedDiagram domain property code
		
		/// <summary>
		/// NestedDiagram domain property Id.
		/// </summary>
		public static readonly global::System.Guid NestedDiagramDomainPropertyId = new global::System.Guid(0xa4c3a73e, 0xa358, 0x47cc, 0xbd, 0x9b, 0xfe, 0x71, 0x2e, 0x07, 0x51, 0x36);
		
		/// <summary>
		/// Storage for NestedDiagram
		/// </summary>
		private global::System.String nestedDiagramPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NestedDiagram domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Task/NestedDiagram.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Task/NestedDiagram.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a4c3a73e-a358-47cc-bd9b-fe712e075136")]
		public global::System.String NestedDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nestedDiagramPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NestedDiagramPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.NestedDiagram domain property.
		/// </summary>
		internal sealed partial class NestedDiagramPropertyHandler : DslModeling::DomainPropertyValueHandler<Task, global::System.String>
		{
			private NestedDiagramPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.NestedDiagram domain property value handler.
			/// </summary>
			public static readonly NestedDiagramPropertyHandler Instance = new NestedDiagramPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.NestedDiagram domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NestedDiagramDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nestedDiagramPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nestedDiagramPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Sort domain property code
		
		/// <summary>
		/// Sort domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortDomainPropertyId = new global::System.Guid(0x4c374509, 0xd5cd, 0x4475, 0xb9, 0xf8, 0x04, 0xa0, 0x42, 0xbe, 0x61, 0x92);
		
		/// <summary>
		/// Storage for Sort
		/// </summary>
		private TaskSort sortPropertyStorage = TaskSort.Regular;
		
		/// <summary>
		/// Gets or sets the value of Sort domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Task/Sort.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Task/Sort.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TaskSort.Regular)]
		[DslModeling::DomainObjectId("4c374509-d5cd-4475-b9f8-04a042be6192")]
		public TaskSort Sort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Task.Sort domain property.
		/// </summary>
		internal sealed partial class SortPropertyHandler : DslModeling::DomainPropertyValueHandler<Task, TaskSort>
		{
			private SortPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Task.Sort domain property value handler.
			/// </summary>
			public static readonly SortPropertyHandler Instance = new SortPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Task.Sort domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TaskSort GetValue(Task element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sortPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Task element, TaskSort newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TaskSort oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass StartPoint
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.StartPoint.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.StartPoint.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fdbeb627-1e79-48f5-aeaf-a10b9d3b7db0")]
	public partial class StartPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfdbeb627, 0x1e79, 0x48f5, 0xae, 0xaf, 0xa1, 0x0b, 0x9d, 0x3b, 0x7d, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass Endpoint
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Endpoint.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Endpoint.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("358be060-ccbd-4f78-b205-9a605341d9c3")]
	public partial class Endpoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Endpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x358be060, 0xccbd, 0x4f78, 0xb2, 0x05, 0x9a, 0x60, 0x53, 0x41, 0xd9, 0xc3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass MergeBranch
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.MergeBranch.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.MergeBranch.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("44f82875-8d74-40d4-8455-9f89396dfc3f")]
	public partial class MergeBranch : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MergeBranch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44f82875, 0x8d74, 0x40d4, 0x84, 0x55, 0x9f, 0x89, 0x39, 0x6d, 0xfc, 0x3f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass Synchronization
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Synchronization.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Synchronization.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8c155385-8d1b-4a12-bda8-7503bcf4bb91")]
	public partial class Synchronization : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Synchronization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8c155385, 0x8d1b, 0x4a12, 0xbd, 0xa8, 0x75, 0x03, 0xbc, 0xf4, 0xbb, 0x91);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass ObjectInState
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectInState.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectInState.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("06af9b86-1699-412b-913b-6853aa6cf05b")]
	public partial class ObjectInState : ObjectFlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectInState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06af9b86, 0x1699, 0x412b, 0x91, 0x3b, 0x68, 0x53, 0xaa, 0x6c, 0xf0, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectInState(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectInState(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region State domain property code
		
		/// <summary>
		/// State domain property Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainPropertyId = new global::System.Guid(0xd729cde0, 0x8da6, 0x4eba, 0xb4, 0x69, 0x9f, 0x27, 0xe2, 0x1d, 0xb0, 0xdd);
		
		/// <summary>
		/// Storage for State
		/// </summary>
		private global::System.String statePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of State domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.ObjectInState/State.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.ObjectInState/State.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d729cde0-8da6-4eba-b469-9f27e21db0dd")]
		public global::System.String State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return statePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectInState.State domain property.
		/// </summary>
		internal sealed partial class StatePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectInState, global::System.String>
		{
			private StatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectInState.State domain property value handler.
			/// </summary>
			public static readonly StatePropertyHandler Instance = new StatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectInState.State domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectInState element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.statePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectInState element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.statePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass Comment
	/// Can be attached to any task flow element.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Comment.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Comment.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0085ca4c-9ac6-453f-b749-626284ae01ff")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0085ca4c, 0x9ac6, 0x453f, 0xb7, 0x49, 0x62, 0x62, 0x84, 0xae, 0x01, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x087b287d, 0xb224, 0x421b, 0xa3, 0x1f, 0xd7, 0xd1, 0xc0, 0x95, 0xce, 0x57);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Comment/Text.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Comment/Text.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("087b287d-b224-421b-a31f-d7d1c095ce57")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowGraph opposite domain role accessor
		/// <summary>
		/// Gets or sets FlowGraph.
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.Comment
		/// </summary>
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId) as FlowGraph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::AppDevUnited.TaskFlowDSLSample.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace AppDevUnited.TaskFlowDSLSample
{
	/// <summary>
	/// DomainClass Actor
	/// Represented by a swim lane on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("AppDevUnited.TaskFlowDSLSample.Actor.DisplayName", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AppDevUnited.TaskFlowDSLSample.Actor.Description", typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel), "AppDevUnited.TaskFlowDSLSample.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AppDevUnited.TaskFlowDSLSample.TaskFlowDSLSampleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5454f77c-fc9e-4024-9839-4110f8b01df0")]
	public partial class Actor : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5454f77c, 0xfc9e, 0x4024, 0x98, 0x39, 0x41, 0x10, 0xf8, 0xb0, 0x1d, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Actor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FlowGraph opposite domain role accessor
		/// <summary>
		/// Gets or sets FlowGraph.
		/// Description for AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.Actor
		/// </summary>
		public virtual FlowGraph FlowGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.ActorDomainRoleId) as FlowGraph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.ActorDomainRoleId, value);
			}
		}
		#endregion
		#region FlowElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowElements.
		/// Description for AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.Actor
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.ActorDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.Actor.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.FlowElement.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AppDevUnited.TaskFlowDSLSample.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::AppDevUnited.TaskFlowDSLSample.Actor sourceActor1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Actor;
			if (sourceActor1 != null)
			{
				// Create link for path FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors
						// Segments 0 and 1
						global::AppDevUnited.TaskFlowDSLSample.FlowGraph actorHost = this.FlowGraph;
						if ( actorHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors'.");
				actorHost.Actors.Add(sourceActor1);

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.FlowElement sourceFlowElement2 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Create link for path ActorHasFlowElements.FlowElements
				this.FlowElements.Add(sourceFlowElement2);

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment3 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
						// Segments 0 and 1
						global::AppDevUnited.TaskFlowDSLSample.FlowGraph commentHost = this.FlowGraph;
						if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				commentHost.Comments.Add(sourceComment3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::AppDevUnited.TaskFlowDSLSample.Actor sourceActor1 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Actor;
			if (sourceActor1 != null)
			{
				// Delete link for path FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors
					// Segments 0 and 1
					global::AppDevUnited.TaskFlowDSLSample.FlowGraph actorHost = this.FlowGraph;
					if ( actorHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/.Actors'.");
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.GetLinks((global::AppDevUnited.TaskFlowDSLSample.FlowGraph)actorHost, sourceActor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.FlowGraphDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasActors.ActorDomainRoleId);
				}

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.FlowElement sourceFlowElement2 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Delete link for path ActorHasFlowElements.FlowElements
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.GetLinks((global::AppDevUnited.TaskFlowDSLSample.Actor)this, sourceFlowElement2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.ActorDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.ActorHasFlowElements.FlowElementDomainRoleId);
				}

				return;
			}
				
			global::AppDevUnited.TaskFlowDSLSample.Comment sourceComment3 = sourceElement as global::AppDevUnited.TaskFlowDSLSample.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments
					// Segments 0 and 1
					global::AppDevUnited.TaskFlowDSLSample.FlowGraph commentHost = this.FlowGraph;
					if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'FlowGraphHasActors.FlowGraph/!FlowGraph/FlowGraphHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.GetLinks((global::AppDevUnited.TaskFlowDSLSample.FlowGraph)commentHost, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.FlowGraphDomainRoleId, global::AppDevUnited.TaskFlowDSLSample.FlowGraphHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
