<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
	Type[] typesToGenerate=new[]
	{
	   typeof(object),
	   typeof(bool),
	   typeof(byte),
	   typeof(char),
	   typeof(decimal),
	   typeof(double),
	   typeof(float),
	   typeof(int),
	   typeof(long),
	   typeof(sbyte),
	   typeof(short),
	   typeof(string),
	   typeof(uint),
	   typeof(ulong),
	   typeof(ushort)   
	};
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

using System;

public static class Greater
{
<#
	foreach (var type in typesToGenerate)
	{		 
#>
public static <#= type.Name #> Of(
	<#=	type.Name #> left, <#= type.Name #> right)
{
<# 
	Type icomparable = 
	  (from	intf in type.GetInterfaces()
	   where typeof(IComparable<>).MakeGenericType(type).IsAssignableFrom(intf)
		|| typeof(IComparable).IsAssignableFrom(intf)
	   select intf).FirstOrDefault();
	if (icomparable != null)
	{
#>
	return left.CompareTo(right) < 0 ? right : left;
<#
	}
    else
	{
#>
	throw new ApplicationException("Type <#= type.Name #> must implement one of the IComparable or IComparable<<#= type.Name #>> interfaces");
<# 
	}
#>
}
<# 
	}
#>
}