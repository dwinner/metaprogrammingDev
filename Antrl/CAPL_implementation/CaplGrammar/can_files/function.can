int funcCall(int arg1, char arg2)
{
	a1(arg1);
	a2(arg1, arg2);
	a3();
}

int funcCall2(int arg1, char arg2)
{
	a1(arg1);
	a2(arg1, arg2);
	a3();
	a1(a1());
	a1(a1(), a2(a1(), x1));
}

float complexReturn(float x)
{
    return(1/(1+pow(x,2)));
}

void flow()
{
    int i,n;
    float x0,xn,h,y[20],so,se,ans,x[20];
    printf("\n Enter values of x0,xn,h:\n");
    scanf("%f%f%f",x0,xn,h);
    n=(xn-x0)/h;
    if(n%2==1)
    {
        n=n+1;
    }
    h=(xn-x0)/n;
    printf("\nrefined value of n and h are:%d  %f\n",n,h);
    printf("\n Y values \n");
    for(i=0; i<=n; i++)
    {
        x[i]=x0+i*h;
        y[i]=f(x[i]);
        printf("\n%f\n",y[i]);
    }
    so=0;
    se=0;
    for(i=1; i<n; i++)
    {
        if(i%2==1)
        {
            so=so+y[i];
        }
        else
        {
            se=se+y[i];
        }
    }
    ans=h/3*(y[0]+y[n]+4*so+2*se);
    printf("\nfinal integration is %f",ans);
    getch();
}

typelessFunc()
{
   struct list_el item;

   item & curr, head;
   int i;

   head = NULL;

   for ( i = 1; i <= 10; i++ )
   {
      curr = /*(item )*/malloc(sizeof(item));
      curr->val = i;
      curr->next  = head;
      head = curr;
   }

   curr = head;

   while(curr) {
      printf("%d\n", curr->val);
      curr = curr->next ;
   }
}

void voidFunc (void)
{
    print(a + b*c);
    print(a + b / c);
}

main()
{
      printf (_("\
Usage: %s [ignored command line arguments]\n\
  or:  %s OPTION\n\
"),
          program_name, program_name);
}

void printme (double num)
{
    write("Floating point %f", num);
}

void printme (int num, char units[])
{
    write("%d %s", num, units);
}